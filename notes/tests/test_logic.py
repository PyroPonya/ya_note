from http import HTTPStatus

from django.contrib.auth import get_user_model
from pytils.translit import slugify

from .abstract_test_case import AbstractTestCase
from notes.models import Note
from notes.forms import WARNING

User = get_user_model()


class TestLogic(AbstractTestCase):
    @classmethod
    def setUpTestData(cls):
        super().setUpTestData()
        cls.old_form_data = {
            'title': cls.note.title,
            'text': cls.note.text,
            'slug': cls.note.slug
        }
        cls.new_form_data = {
            'title': 'New Title',
            'text': 'New Text',
        }

    def test_user_can_create_note(self):
        """Залогиненный пользователь может создать заметку,
        а анонимный — не может.
        """
        Note.objects.all().delete()
        self.user_client.post(
            self.NOTES_ADD_URL,
            data=self.new_form_data
        )
        self.assertEqual(Note.objects.count(), 1)
        new_note = Note.objects.get()
        self.assertEqual({
            'title': new_note.title,
            'text': new_note.text,
        }, self.new_form_data)

    def test_user_cant_create_note_with_not_unique_slug(self):
        """Невозможно создать две заметки с одинаковым slug."""
        notes_count = Note.objects.count()
        response = self.author_client.post(
            self.NOTES_ADD_URL,
            data=self.old_form_data
        )
        self.assertEqual(Note.objects.count(), notes_count)
        self.assertFormError(
            response,
            'form',
            'slug',
            errors=(self.old_form_data['slug'] + WARNING)
        )

    def test_autogenerated_slug(self):
        """Если при создании заметки не заполнен slug,
        то он формируется автоматически,
        с помощью функции pytils.translit.slugify.
        """
        Note.objects.all().delete()
        self.author_client.post(
            self.NOTES_ADD_URL,
            data=self.new_form_data
        )
        self.assertEqual(Note.objects.count(), 1)
        new_note = Note.objects.get()
        test_slug = slugify(self.new_form_data['title'])[:100]
        self.assertEqual(new_note.slug, test_slug)

    def test_user_can_edit_note(self):
        """Пользователь может редактировать и удалять свои заметки,
        но не может редактировать или удалять чужие.
        """
        self.author_client.post(
            self.NOTES_EDIT_URL,
            data=self.new_form_data
        )
        edited_note = Note.objects.get(id=self.note.id)
        self.assertEqual(
            (edited_note.title, edited_note.text),
            (self.new_form_data['title'], self.new_form_data['text'])
        )

    def test_user_cant_edit_others_note(self):
        self.user_client.post(
            self.NOTES_EDIT_URL,
            data=self.new_form_data
        )
        note = Note.objects.get(id=self.note.id)
        self.assertEqual(
            (note.title, note.text),
            (self.old_form_data['title'], self.old_form_data['text'])
        )

    def test_user_can_delete_note(self):
        notes_count = Note.objects.count()
        self.author_client.post(self.NOTES_DELETE_URL)
        self.assertEqual(Note.objects.count(), notes_count - 1)

    def test_user_cant_delete_others_note(self):
        """пользователь не может удалять чужие заметки."""
        notes_count = Note.objects.count()
        response = self.user_client.post(self.NOTES_DELETE_URL)
        self.assertEqual(response.status_code, HTTPStatus.NOT_FOUND)
        self.assertEqual(Note.objects.count(), notes_count)
