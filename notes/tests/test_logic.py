from http import HTTPStatus

from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from django.test import Client, TestCase
from django.urls import reverse

from notes.forms import NoteForm
from notes.models import Note

User = get_user_model()


class TestLogic(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.user = User.objects.create_user(
            username='user'
        )
        cls.author = User.objects.create_user(
            username='author'
        )
        cls.note_title = 'Title'
        cls.note_text = 'Text'
        cls.note_slug = 'note-slug'
        cls.note = Note.objects.create(
            title=cls.note_title,
            text=cls.note_text,
            slug=cls.note_slug,
            author=cls.author
        )
        cls.form_data = {
            'title': 'New Title',
            'text': 'New Text',
            'slug': 'new-title'
        }
        cls.author_client = Client()
        cls.author_client.force_login(cls.author)
        cls.user_client = Client()
        cls.user_client.force_login(cls.user)

    # Залогиненный пользователь может создать заметку, а анонимный — не может.
    def test_user_can_create_note(self):
        url = reverse('notes:add')
        response = self.author_client.post(url, data=self.form_data)
        self.assertEqual(response.status_code, HTTPStatus.FOUND)
        self.assertEqual(Note.objects.count(), 2)

    # Невозможно создать две заметки с одинаковым slug.
    def test_user_cant_create_note_with_not_unique_slug(self):
        url = reverse('notes:add')
        self.assertEqual(Note.objects.count(), 1)
        response = self.author_client.post(url, data=self.form_data)
        self.assertEqual(response.status_code, HTTPStatus.FOUND)
        self.assertEqual(Note.objects.count(), 2)
        response = self.author_client.post(url, data=self.form_data)
        self.assertEqual(response.status_code, HTTPStatus.OK)
        self.assertEqual(Note.objects.count(), 2)

    # Если при создании заметки не заполнен slug, то он формируется автоматически, с помощью функции pytils.translit.slugify.
    def test_autogenerated_slug(self):
        url = reverse('notes:add')
        response = self.author_client.post(url, data=self.form_data)
        self.assertEqual(response.status_code, HTTPStatus.FOUND)
        self.assertEqual(Note.objects.count(), 2)
        new_note = get_object_or_404(Note, title=self.form_data['title'])
        self.assertEqual(new_note.slug, 'new-title')

    # Пользователь может редактировать и удалять свои заметки, но не может редактировать или удалять чужие.
    def test_user_can_edit_note(self):
        url = reverse('notes:edit', args=(self.note_slug,))
        response = self.author_client.post(url, data=self.form_data)
        self.assertEqual(response.status_code, HTTPStatus.FOUND)
        self.assertEqual(Note.objects.count(), 1)

    def test_user_cant_edit_others_note(self):
        url = reverse('notes:edit', args=(self.note_slug,))
        response = self.user_client.post(url, data=self.form_data)
        self.assertEqual(response.status_code, HTTPStatus.NOT_FOUND)
        self.assertEqual(Note.objects.count(), 1)

    def test_user_can_delete_note(self):
        # create new note
        url = reverse('notes:add')
        response = self.author_client.post(url, data=self.form_data)
        self.assertEqual(Note.objects.count(), 2)
        # delete new note
        url = reverse('notes:delete', args=(self.form_data['slug'],))
        response = self.author_client.post(url)
        self.assertEqual(response.status_code, HTTPStatus.FOUND)
        self.assertEqual(Note.objects.count(), 1)

    # пользователь не может удалять чужие заметки
    def test_user_cant_delete_others_note(self):
        url = reverse('notes:delete', args=(self.note_slug,))
        self.assertEqual(Note.objects.count(), 1)
        response = self.user_client.post(url)
        self.assertEqual(response.status_code, HTTPStatus.NOT_FOUND)
        self.assertEqual(Note.objects.count(), 1)
